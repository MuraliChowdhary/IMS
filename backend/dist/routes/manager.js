"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// src/routes/manager.ts
const express_1 = require("express");
const auth_1 = require("../middleware/auth");
// import { uploadImage, uploadMiddleware } from "../controllers/uploadController";
const uploadMiddleware_1 = require("../middleware/uploadMiddleware");
const productController_1 = require("../controllers/productController");
const router = (0, express_1.Router)();
// router.get("/inventory", checkAuth(["MANAGER"]), listInventory);
// router.post("/inventory", checkAuth(["MANAGER"]), addInventory);
// router.put("/inventory/:id", checkAuth(["MANAGER"]), updateInventory);
// router.delete("/inventory/:id", checkAuth(["MANAGER"]), deleteInventory);
// router.get("/reorder", checkAuth(["MANAGER"]), viewLowStock);
// router.post("/reorder", checkAuth(["MANAGER"]), createReorder);
const manager_1 = require("../controllers/manager");
const express_validator_1 = require("express-validator");
router.get("/inventory", (0, auth_1.checkAuth)(["MANAGER"]), manager_1.listInventory);
router.get("/inventoryItem/:id", (0, auth_1.checkAuth)(["MANAGER"]), manager_1.getInventoryItem);
router.post("/addinventory", (0, auth_1.checkAuth)(["MANAGER"]), manager_1.addInventoryItem);
router.put("/inventory/:id", (0, auth_1.checkAuth)(["MANAGER"]), manager_1.updateInventory);
router.get("/inventory/currentInventoryValue", (0, auth_1.checkAuth)(["MANAGER"]), manager_1.getCurrentInventoryValue);
// router.delete("/inventory/:id", checkAuth(["MANAGER"]), deleteInventory);
// router.post("/upload", uploadMiddleware, uploadImage);
router.post("/product", (0, auth_1.checkAuth)(["MANAGER"]), manager_1.addProduct);
router.post("/products", (0, auth_1.checkAuth)(["MANAGER"]), manager_1.addProducts);
router.get("/products", (0, auth_1.checkAuth)(["MANAGER"]), manager_1.getProducts);
router.post("/product/:id", (0, auth_1.checkAuth)(["MANAGER"]), manager_1.getProductById);
router.put("/product/:id", (0, auth_1.checkAuth)(["MANAGER"]), manager_1.updateProduct);
router.get("/lowstock", (0, auth_1.checkAuth)(["MANAGER"]), manager_1.lowstock);
router.post("/reorder", (0, auth_1.checkAuth)(["MANAGER"]), manager_1.checkInventoryLevels);
router.patch("/pricedecision/:orderId", (0, auth_1.checkAuth)(["MANAGER"]), manager_1.reviewPriceProposal);
router.patch("/qc/:orderId", (0, auth_1.checkAuth)(["MANAGER"]), manager_1.qualityCheck);
router.patch("/deliveredConfirmation/:orderId", (0, auth_1.checkAuth)(["MANAGER"]), manager_1.markOrderAsDelivered);
router.get("/pendingSupplierOrders", (0, auth_1.checkAuth)(["MANAGER"]), manager_1.pendingSupplierOrders);
router.get("/pendingStoreOrdersBySupplier", (0, auth_1.checkAuth)(["MANAGER"]), manager_1.pendingStoreOrdersBySupplier);
router.post("/productFilters", (0, auth_1.checkAuth)(["MANAGER"]), (0, express_validator_1.check)("MANAGER"), manager_1.getProductsWithFilters);
router.get('/expiring', (0, auth_1.checkAuth)(["MANAGER"]), manager_1.getExpiringProducts);
router.post('/discount', (0, auth_1.checkAuth)(["MANAGER"]), manager_1.createExpiryDiscount);
router.post('/add/csv', uploadMiddleware_1.upload.single('file'), productController_1.uploadCSVProducts);
exports.default = router;
